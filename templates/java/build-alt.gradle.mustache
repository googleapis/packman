buildscript {
  repositories {
    mavenCentral()
  }
  dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7' }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.google.protobuf'

description = 'GRPC library for service {{{api.name}}}-{{{api.version}}}'
group = "com.google.api.grpc"
version = "{{{api.semantic_version}}}"
// TODO: use a flag to determine whether to produce a release or a snapshot
sourceCompatibility = 1.6
targetCompatibility = 1.6
def tmpSnapshotRepo = "http://104.197.230.53:8081/nexus/content/repositories/snapshots/"

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    // Private maven repo.  Temporary, until googleapis-common-protos is published
    url tmpSnapshotRepo
  }
}

dependencies {
  compile "com.google.protobuf:protobuf-java:3.0.0-beta-3"
  compile "io.gapi:googleapis-common-protos:0.0.0-SNAPSHOT"
  compile "io.grpc:grpc-all:0.15.0"
}

protobuf {
  protoc {
    // The version of protoc must match protobuf-java. If you don't depend on
    // protobuf-java directly, you will be transitively depending on the
    // protobuf-java version that grpc depends on.
    artifact = "com.google.protobuf:protoc:3.0.0-beta-3"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:0.15.0'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        outputSubDir = 'java'
      }
    }
  }
}

sourceSets {
  main {
    java {
      srcDir 'build/generated/source/proto/main/java'
    }
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required false
  sign configurations.archives
}

if (rootProject.hasProperty('mavenRepoUrl')) {
  uploadArchives.repositories.mavenDeployer {
    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    String mavenRepoUrl = rootProject.mavenRepoUrl
    def configureAuth = {
      if (rootProject.hasProperty('mavenUsername') && rootProject.hasProperty('mavenPassword')) {
        authentication(userName: rootProject.mavenUsername, password: rootProject.mavenPassword)
      } else {
        throw new GradleException("Root project must have mavenUsername and mavenPassword")
      }
    }
    repository(url: mavenRepoUrl, configureAuth)
    pom.project {
      name "com.google.api.grpc:grpc-{{{api.name}}}-{{{api.version}}}"
      description project.description
      url 'https://github.com/googleapis/googleapis'
      scm {
        connection 'scm:svn:https://github.com/google/googleapis.git'
        developerConnection 'scm:svn:git@github.com:google/googleapis.git'
        url 'https://github.com/google/googleapis'
      }
      licenses {
        license {
          name 'Apache-2.0'
          url ''
        }
      }
      developers {
        developer {
          id  "googleapis-packages@google.com"
          name "Google Inc"
          email "googleapis-packages@google.com"
          url "https://github.com/googleapis/googleapis"
          // https://issues.gradle.org/browse/GRADLE-2719
          organization = "Google, Inc."
          organizationUrl "https://www.google.com"
        }
      }
    }
  }
}
