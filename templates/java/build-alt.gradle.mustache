buildscript {
  repositories {
    mavenCentral()
  }
  dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.6' }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.google.protobuf'

description = 'GRPC library for service {{api.name}}-{{api.version}}'
group = "io.gapi"
version = "{{api.semantic_version}}-SNAPSHOT"
// TODO: use a flag to determine whether to produce a release or a snapshot
sourceCompatibility = 1.6
targetCompatibility = 1.6
def tmpSnapshotRepo = "http://104.197.230.53:8081/nexus/content/repositories/snapshots/"

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    // Private maven repo.  Temporary, until googleapis-common-protos is published
    url tmpSnapshotRepo
  }
}

dependencies {
  compile "com.google.protobuf:protobuf-java:3.0.0-beta-2"
  compile "io.gapi:googleapis-common-protos:0.0.0-SNAPSHOT"
}

protobuf {
  protoc {
    // The version of protoc must match protobuf-java. If you don't depend on
    // protobuf-java directly, you will be transitively depending on the
    // protobuf-java version that grpc depends on.
    artifact = "com.google.protobuf:protoc:3.0.0-beta-2"
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required false
  sign configurations.archives
}

uploadArchives.repositories.mavenDeployer {
  beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
  String stagingUrl
    if (rootProject.hasProperty('repositoryId')) {
      stagingUrl = 'https://oss.sonatype.org/service/local/staging/deployByRepositoryId/' +
          rootProject.repositoryId
    } else {
      stagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    }
  def configureAuth = {
    if (rootProject.hasProperty('ossrhUsername') && rootProject.hasProperty('ossrhPassword')) {
      authentication(userName: rootProject.ossrhUsername, password: rootProject.ossrhPassword)
    }
  }
  repository(url: stagingUrl, configureAuth)
  snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/', configureAuth)
}

[
  install.repositories.mavenInstaller,
  uploadArchives.repositories.mavenDeployer,
]*.pom { pom ->
  pom.project {
    name "io.gapi:{{api.name}}-{{api.version}}"
    description project.description
    url '{{{api.homepage}}}'

    scm {
      connection 'scm:svn:https://github.com/google/googleapis.git'
      developerConnection 'scm:svn:git@github.com:google/googleapis.git'
      url 'https://github.com/google/googleapis'
    }

    licenses {
      license {
        name '{{api.license}}'
        url '{{{api.license.url}}}'
      }
    }

    developers {
      developer {
        id "{{api.email}}"
        name "{{api.author}}"
        email "{{api.email}}"
        url "{{{api.homepage}}}"
        // https://issues.gradle.org/browse/GRADLE-2719
        organization = "Google, Inc."
        organizationUrl "https://www.google.com"
      }
    }
  }
}
