buildscript {
  repositories {
    mavenCentral()
  }
  dependencies { classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.7' }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.google.protobuf'

description = 'GRPC library for {{{api.fullName}}}'
group = "com.google.api.grpc"
version = "{{{api.semantic_version}}}"
// TODO: use a flag to determine whether to produce a release or a snapshot
sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  compile "com.google.protobuf:protobuf-java:{{{dependencies.protobuf.java.version}}}"
  {{#api.protoGenPackageDeps}}
  compile "com.google.api.grpc:{{{.}}}:{{{api.semantic_version}}}"
  {{/api.protoGenPackageDeps}}
  compile "io.grpc:grpc-all:{{{dependencies.grpc.java.version}}}"
  compile "com.google.api:api-common:{{{dependencies.api-common.java.version}}}"
}

ext {
  packageName = '{{{api.fullName}}}'
}

ext.locateGapicPluginMethod = { ->
  def outstream = new ByteArrayOutputStream()
  exec {
    commandLine 'which', 'gapic_plugin.py'
    standardOutput = outstream
  }
  return outstream.toString().trim()
}

protobuf {
  protoc {
    // The version of protoc must match protobuf-java. If you don't depend on
    // protobuf-java directly, you will be transitively depending on the
    // protobuf-java version that grpc depends on.
    artifact = "com.google.protobuf:protoc:{{{dependencies.protobuf.java.version}}}"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:{{{dependencies.grpc.java.version}}}'
    }
    {{#api.useGapicPlugin}}
    gapic {
      path = locateGapicPluginMethod()
    }
    {{/api.useGapicPlugin}}
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        outputSubDir = 'java'
      }
      {{#api.useGapicPlugin}}
      gapic {
        outputSubDir = 'java'
        option '{{{api.gapicYaml}}}'
      }
      {{/api.useGapicPlugin}}
    }
  }
}

sourceSets {
  main {
    java {
      srcDir 'build/generated/source/proto/main/java'
    }
  }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required false
  sign configurations.archives
}

if (rootProject.hasProperty('mavenRepoUrl')) {
  uploadArchives.repositories.mavenDeployer {
    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
    String mavenRepoUrl = rootProject.mavenRepoUrl
    def configureAuth = {
      if (rootProject.hasProperty('mavenUsername') && rootProject.hasProperty('mavenPassword')) {
        authentication(userName: rootProject.mavenUsername, password: rootProject.mavenPassword)
      } else {
        throw new GradleException("Root project must have mavenUsername and mavenPassword")
      }
    }
    repository(url: mavenRepoUrl, configureAuth)
    pom.project {
      name "com.google.api.grpc:${packageName}"
      description project.description
      url 'https://github.com/googleapis/googleapis'
      scm {
        connection 'scm:svn:https://github.com/google/googleapis.git'
        developerConnection 'scm:svn:git@github.com:google/googleapis.git'
        url 'https://github.com/google/googleapis'
      }
      licenses {
        license {
          name 'Apache-2.0'
          url ''
        }
      }
      developers {
        developer {
          id  "googleapis-packages@google.com"
          name "Google Inc"
          email "googleapis-packages@google.com"
          url "https://github.com/googleapis/googleapis"
          // https://issues.gradle.org/browse/GRADLE-2719
          organization = "Google, Inc."
          organizationUrl "https://www.google.com"
        }
      }
    }
  }
} else {
  task failUploadArchives << {
    throw new GradleException("uploadArchives needs mavenRepoUrl to be set")
  }
  tasks.uploadArchives.dependsOn(failUploadArchives)
}

task checkOutGhPages {
  if (!new File('tmp_gh-pages').exists()) {
    exec {
      commandLine 'git', 'clone', '--branch', 'gh-pages',
          '--single-branch', 'https://github.com/googleapis/googleapis/', 'tmp_gh-pages'
    }
  }
}

task copyFilesToGhPages {
  dependsOn 'checkOutGhPages'
  dependsOn 'javadoc'
  doLast {
    def newSiteDirPath = "tmp_gh-pages/java/${packageName}/${project.version}/apidocs/"
    new File(newSiteDirPath).mkdirs()
    copy {
      from 'build/docs/javadoc'
      into newSiteDirPath
    }
  }
}

task createApiDocsRedirect {
  dependsOn 'copyFilesToGhPages'
  doLast {
    def outputContent = new File('templates/apidocs_index.html.template').text
    {{=<% %>=}}
    outputContent = outputContent.replace('{{siteVersion}}', project.version)
    outputContent = outputContent.replace('{{packageName}}', packageName)
    <%={{ }}=%>
    new File("tmp_gh-pages/java/${packageName}/apidocs").mkdirs()
    new File("tmp_gh-pages/java/${packageName}/apidocs/index.html").write(outputContent)
    exec {
      workingDir 'tmp_gh-pages/'
      commandLine 'git', 'add', '.'
    }
    exec {
      workingDir 'tmp_gh-pages/'
      commandLine 'git', 'commit', '-m', "Regenerating docs for ${packageName} ${project.version}"
    }
    println 'New docs have been generated under tmp_gh-pages and have been committed;'
    println 'Next they just need to be pushed with "git push".'
  }
}

// Regenerates the gh-pages branch under tmp_gh-pages, which must be committed separately
task updateDocsWithCurrentVersion {
  dependsOn 'createApiDocsRedirect'
}
